@using Microsoft.AspNetCore.Components.Routing
@using System.Reflection

<Router @ref=router AppAssembly="AppAssembly" AdditionalAssemblies="AdditionalAssemblies" NotFound="NotFound!" Found="Found!" Navigating="Navigating!" OnNavigateAsync="OnNavigate" />

@code {
    private Router router = default!;

    [Inject] public NavigationManager NavigationManager { get; set; } = default!;

    [Inject] public IRoutingStateProvider RoutingStateProvider { get; set; } = default!;

    /// <summary>
    /// Gets or sets the assembly that should be searched for components matching the URI.
    /// </summary>
    [Parameter]
    [EditorRequired]
    public Assembly AppAssembly { get; set; } = default!;

    /// <summary>
    /// Gets or sets a collection of additional assemblies that should be searched for components
    /// that can match URIs.
    /// </summary>
    [Parameter] public IEnumerable<Assembly>? AdditionalAssemblies { get; set; }

    /// <summary>
    /// Gets or sets the content to display when no match is found for the requested route.
    /// </summary>
    [Parameter]
    public RenderFragment? NotFound { get; set; }

    /// <summary>
    /// Gets or sets the content to display when a match is found for the requested route.
    /// </summary>
    [Parameter]
    [EditorRequired]
    public RenderFragment<RouteData>? Found { get; set; }

    [Parameter] public Type EveryPage { get; set; } = default!;

    /// <summary>
    /// Get or sets the content to display when asynchronous navigation is in progress.
    /// </summary>
    [Parameter] public RenderFragment? Navigating { get; set; }

    private Task OnNavigate(NavigationContext context)
    {
        if (!(RoutingStateProvider is TenantRoutingStateProvider tenantRoutingStateProvider))
            return Task.CompletedTask;

        tenantRoutingStateProvider.RouteData = null;

        if (context.Path.StartsWith("prefix"))
        {
            // This will be the route of the component without the supplied prefix.
            var pathWithoutPrefix = context.Path.Replace("prefix", "");
            var (pageType, parameters) = FindComponent(pathWithoutPrefix);
            if (pageType != null)
            {
                tenantRoutingStateProvider.RouteData = new RouteData(pageType, parameters ?? new Dictionary<string, object?>());
            }
        }

        return Task.CompletedTask;
    }

    private (Type?, IReadOnlyDictionary<string, object?>?) FindComponent(string path)
    {
        var routerType = typeof(Router);
        var routerAssembly = routerType.Assembly;
        var routesProperty = routerType.GetProperty("Routes", BindingFlags.NonPublic | BindingFlags.Instance);
        var routeTable = routesProperty?.GetValue(router);
        var routeContextType = routerAssembly.GetTypes().FirstOrDefault(t => t.Name == "RouteContext")!;
        var routeContext = Activator.CreateInstance(routeContextType, new[] { path });
        var routeTableRouteMethod = routeTable!.GetType().GetMethod("Route");
        routeTableRouteMethod!.Invoke(routeTable, new[] { routeContext });

        return (routeContextType.GetProperty("Handler")!.GetValue(routeContext) as Type, routeContextType.GetProperty("Parameters")!.GetValue(routeContext) as IReadOnlyDictionary<string, object?>);
    }
}